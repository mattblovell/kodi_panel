/*
 * Device Tree overlay for ili9341 display, using luma.lcd wiring
 * --------------------------------------------------------------
 *
 *   This file was originally leveraged from the tinydrm project:
 *
 *       https://github.com/notro/tinydrm/tree/master/rpi-overlays
 *
 *   The sole change was to the GPIO pin numbering assignments made in
 *   fragment@2 below, such that wiring matches that used with
 *   luma.lcd in the kodi_panel.py script.  Having the wiring match is
 *   extremely convenient for switching back and forth, between
 *   luma.lcd and a framebuffer approach.
 *
 *   The file can be compiled into a .dtbo file via dtc:
 *
 *      dtc -@ -Hepapr -I dts -O dtb -o tinydrm-rpi-display.dtbo tinydrm-rpi-display.dts
 *
 *   The result can then be copied into the /boot/overlays directory and
 *   run-time loaded via:
 *
 *      sudo dtoverlay tinydrm-rpi-display
 *
 *   The result should be a successful load (inspect via dmesg) and
 *   the creation of a /dev/fb1 file.  The display will turn white
 *   briefly, clear itself, and then turn the backlight off.  The
 *   backlight can be turned on again via a command like
 *
 *      con2fbmap 1 1
 *
 *   (As of this writing, I don't know what the driver is really
 *   looking for to trigger turning the backlight back on.  The above
 *   command accomplishes it, though.)
 *
 *   If you just want to ensure that the display is alive, you can
 *   dump random data (static, effectively) into the framebuffer via
 *
 *      cat /dev/urandom > /dev/fb1
 *
 *   Note that none of the above -- dtoverlays and getting a tinydrm
 *   device driver running -- is necessary if one is content with
 *   luma.lcd!  
 *
 *   I have not yet experimented with the PWM backlight section below.
 *   It was commented out in the original tinydrm source.
 *
 */

/dts-v1/;
/plugin/;

/ {
	compatible = "brcm,bcm2708";

	fragment@0 {
		target = <&spi0>;
		__overlay__ {
			status = "okay";

			spidev@0{
				status = "disabled";
			};

			spidev@1{
				status = "disabled";
			};
		};
	};

	fragment@1 {
		target = <&gpio>;
		__overlay__ {
			rpi_display_pins: rpi_display_pins {
				brcm,pins = <18 23 24 25>;
				brcm,function = <1 1 1 0>; /* out out out in */
			};
		};
	};

	fragment@2 {
		target = <&spi0>;
		__overlay__ {
			/* needed to avoid dtc warning */
			#address-cells = <1>;
			#size-cells = <0>;

			rpidisplay: rpi-display@0{
				compatible = "mi,mi0283qt";
				reg = <0>;
				//pinctrl-names = "default";
				//pinctrl-0 = <&rpi_display_pins>;

				spi-max-frequency = <32000000>;
				rotation = <180>;
				reset-gpios = <&gpio 25 0>;
				dc-gpios = <&gpio 24 0>;
				backlight = <&backlight>;
			};

			rpi-display-ts@1 {
				compatible = "ti,ads7846";
				reg = <1>;

				spi-max-frequency = <2000000>;
				interrupts = <16 2>; /* high-to-low edge triggered */
				interrupt-parent = <&gpio>;
				pendown-gpio = <&gpio 16 0>;
				ti,x-plate-ohms = /bits/ 16 <60>;
				ti,pressure-max = /bits/ 16 <255>;
			};
		};
	};

	fragment@3 {
		target-path = "/soc";
		__overlay__ {
			backlight: backlight {
				compatible = "gpio-backlight";
				gpios = <&gpio 18 0>;
			};
		};
	};

/*

Alternative pwm backlight section

	fragment@3 {
		target = <&gpio>;
		__overlay__ {
			// This is necessary on Pi1,2,Z not Pi3
			pinctrl-0 = <&gpioout &alt0>; // Remove i2s_alt0 which claims gpio18
		};
	};

	fragment@4 {
		target = <&pwm>;
		__overlay__ {
			pinctrl-names = "default";
			pinctrl-0 = <&pwm0_gpio18>;
			status = "okay";
		};
	};

	fragment@5 {
		target-path = "/soc";
		__overlay__ {
			backlight: backlight {
				compatible = "pwm-backlight";
				pwms = <&pwm 0 5000000>;
				// These levels need calibration
				brightness-levels = <0 5 10 20 40 60 80 100>;
				default-brightness-level = <7>;
			};
		};
	};
*/

	__overrides__ {
		speed = <&rpidisplay>,"spi-max-frequency:0";
		rotation = <&rpidisplay>,"rotation:0";
		format = <&rpidisplay>,"format";
	};
};
