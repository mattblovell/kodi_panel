# --------------------------------------------------------------------
# Setup file for kodi_panel using 320x240 resolution
#
#   For documentation regarding TOML (Tom's Obvious Minimal Language),
#   see references at https://toml.io/en/
#
#   TOML is context sensitive, so the order of the entries below
#   (particularly the arrays of tables) DOES matter unfortunately.
#
# --------------------------------------------------------------------

# Specify the Kodi instance to query.  Use localhost if running on
# the same box as Kodi, otherwise specify a resolvable machine name or
# IP address.
BASE_URL = "http://localhost:8080"

# --------------------------------------------------------------------
#
# GPIO setup, display options
#

# Specify the size of the display in pixels.  These values get stored
# into a tuple within kodi_panel and MUST match how the display (or
# framebuffer) is configured.
DISPLAY_WIDTH  = 320
DISPLAY_HEIGHT = 240

# GPIO assignment for screen's touch interrupt (T_IRQ), using RPi.GPIO
# numbering.
#
# Assuming your display has a touchscreen with an active-low
# interrupt, find a pin that's unused by luma.  The touchscreen chip
# in my display has its own internal pullup resistor, so no GPIO
# pullup is needed.
#
# I found the following pins to work on the two SBCs.
#
#   Odroid C4:  GPIO19 (physical Pin 35)
#   RPi 3:      GPIO16 (physical Pin 36)
#
# Pin choices are fixed if using the header on the Waveshare displays
# to connect directly to GPIO pins:
#
#   Waveshare 3.5" LCD (B):  GPIO17 (physical pin 11)
#   Waveshare 4" HDMI (H):   GPIO25 (physical pin 22)
#
USE_TOUCH = true   # Set false to disable interrupt use
TOUCH_INT = 19

# The USE_BACKLIGHT boolean controls whether calls are made to
# luma.lcd at all to change backlight state.  Users with OLED displays
# (or using luma.core's linux_framebuffer) should set it to false.
#
# This variable should likely be set false if using the PWM control
# through sysfs files (as presently implemented in kodi_panel_fb.py).
# Note that the framebuffer version (kodi_panel_fb.py) may ignore or
# override this setting, in favor of the group below.
#
USE_BACKLIGHT = true

# See example_setup_800x480.toml for possible hardware PWM
# settings.

# --------------------------------------------------------------------
#
# Info screens, colors, & fonts
#

# Audio and video screens are enabled and disabled separately.  See
# the 800x480 example setup file for the additional dictionaries that
# must be set for video info screens.
#
# Slideshow screens are also possible, controlled by yet another
# layout (or layouts).
#
ENABLE_AUDIO_SCREENS = true
ENABLE_VIDEO_SCREENS = true
ENABLE_SLIDESHOW_SCREENS = false


# Should the idle status screen always be shown?  That could be
# desired if no touch interrupt is available.
# ENABLE_IDLE_STATUS = true


# The script has built-in lists of Kodi InfoLabels to retrieve for the
# various screens that are possible, defined at the beginning of the
# file.  Each list can be augmented, if needed, via the *_LABELS lists
# below.
#
# To make use of this feature, uncomment the associated assignment and
# add additional InfoLabels as strings.  Here is an example, although
# both of the InfoLabels listed are part of the built-in set:
#
#    STATUS_LABELS = [
#       "System.Date",
#       "System.CPUTemperature"
#     ]
#
#
# See the Kodi wiki:
#
#    https://kodi.wiki/view/InfoLabels
#
# to see what InfoLabels are available; these can change from one
# version of Kodi to another.
#

# List of additional InfoLabels to retrieve for status screen
# STATUS_LABELS = []

# List of additional InfoLabels to retrieve for audio screen(s)
# AUDIO_LABELS = []

# List of additional InfoLabels to retrieve for video screen(s)
# VIDEO_LABELS = []

# List of additional InfoLabels to retrieve for slideshow
# SLIDESHOW_LABELS = []

#
# With v1.44, InfoBooleans can also be retrieved
#
#   https://kodi.wiki/view/List_of_boolean_conditions
#
# STATUS_BOOLEANS = []
# AUDIO_BOOLEANS = []
# VIDEO_BOOLEANS = []
# SLIDESHOW_BOOLEANS = []


# Paths to default thumbnails.  These do NOT get resized, so they
# should be created at the desired size.
KODI_THUMB      = "images/kodi_thumb.jpg"     # Kodi icon
DEFAULT_AUDIO   = "images/music_icon.png"     # standard music file w/o artwork
DEFAULT_AIRPLAY = "images/airplay_thumb.png"  # Airplay file w/o artwork


# Audio Layout Names
# ------------------
#
#   Specify the names of layouts that are available when playing an
#   audio file.  The strings used must correspond to those used within
#   the ALAYOUT dictionary defined below.
#
ALAYOUT_NAMES = [
	"A_DEFAULT",     # small artwork, elapsed time, track info
	"A_FULLSCREEN",  # fullscreen cover only
	"A_FULL_PROG"    # fullscreen cover with vertical progress bar
]

# Initial mode to use upon startup
ALAYOUT_INITIAL = "A_DEFAULT"


# Video Layout Names
# ------------------
#
#   Similar to audio screen modes above, except for the
#   following tidbit ...
#
#   Should the layout for video screens be auto-selected (within the
#   video_screens() function) based upon content of InfoLabel fields
#   or InfoBooleans?  If so, then set VLAYOUT_AUTOSELECT to true.
#
#   If that flag is set to true, then VLAYOUT_NAMES should be
#   populated with entries that match the heuristic if-then that is
#   used by video_screens().
#
#   If that variable is to false or left undeclared, then video modes
#   just form a cycle that gets advanced via the touch interrupt, as
#   happens for the audio screens.
#
# VLAYOUT_AUTOSELECT = false

VLAYOUT_NAMES = [
	"V_FULLSCREEN",     # movie poster
]

# Initial mode to use upon startup
VLAYOUT_INITIAL = "V_FULLSCREEN"



# Slideshow Layout Names
# ----------------------
#
#   Similar to audio screen modes and video screen modes
#

SLAYOUT_AUTOSELECT = false
SLAYOUT_NAMES = [ "DEFAULT" ]
SLAYOUT_INITIAL = "DEFAULT"



# Status/Info Layout Names
# ------------------------
#
#   This section is entirely optional and thus can be left commented
#   out unless multiple status/info screens are desired.  If one is
#   content with just a single layout (shown either upon a touch
#   interrupt or enabled whenever Kodi is idle), then a single-level
#   layout table further below suffices.  (This becomes a single-level
#   dictionary in Python.)
#
#   An example single-level status layout consists of entries such as
#
#    [STATUS_LAYOUT.thumb]
#      posx = 5
#      posy = 5
#      size = 128
#
#    [[STATUS_LAYOUT.fields]]
#      name = "version"
#      posx = 145
#      posy = 8
#      font = "font_main"
#      fill = "color_artist"
#
#
#   If multiple status/info layouts are desired, then one MUST
#   define both of the following variables:
#
#      STATUS_NAMES     array of strings specifying the name of
#                       each status/info screen layout
#
#      STATUS_INITIAL   string specifying default layout
#
#   Additionally, one's startup script MUST then define an
#   auto-selection function that decides which layout to use, given
#   the results of retrieving STATUS_LABELS and STATUS_BOOLEANS from
#   Kodi.
#
#   The auto-selection function would be similar in structure to
#   video_select_default() in kodi_panel_display.py.  (One must make
#   use of the kodi_panel_display namespace when making type or
#   variable references, but the structure of the code itself is
#   similar to that example function.)
#
#   The user would define the appropriate functionality in whatever
#   startup script is used (e.g., kodi_panel_ili9341 or kodi_panel_fb)
#   and point to it by overriding
#
#     kodi_panel_display.STATUS_SELECT_FUNC
#
#   Finally, the layout tables defined below for STATUS_LAYOUT must
#   define the elements desired for each of the names given in the
#   STATUS_NAMES array.  So, if that array of names is specified
#   as "my_layoutA" and "my_layoutB", then the tables below will
#   end up elements such as
#
#     [STATUS_LAYOUT.my_layoutA.thumb]  and
#     [[STATUS_LAYOUT.my_layoutA.fields]]
#
#   and
#
#     [STATUS_LAYOUT.my_layoutB.thumb]  and
#     [[STATUS_LAYOUT.my_layoutB.fields]]
#
# --------------------------------------------------------------------
# STATUS_NAMES = []
# STATUS_INITIAL = ""



# Codec Lookup
#
#   The codec_name lookup table can be augmented, or existing entries
#   changed.  The style of entries is identical to what is done for
#   the COLORS table below.
#
#[CODECS]



# Colors
#
#   Specify color names to use further below.  To know whether this
#   dictionary needs to be consulted, all names MUST begin with
#   "color_".  Color references without those initial characters just
#   get passed through, without a lookup in this dictionary.
#
[COLORS]
 color_gray   = '#424242'    # progress bar background (used 'dimgrey' for a while)
 color_7S     = '#00FF78'    # 7-Segment color (used 'SpringGreen' for a while)
 color_artist = 'yellow'     # artist name


# Font list
#
#   These entries create an array that kodi_panel processes at startup
#   time, pulling the fonts into Pillow.  The font name that is
#   assigned must match those that get used further below in the
#   layouts.
#
#   A "font_main" MUST be defined and successfully loaded!
#

# Standard fonts
[[fonts]]
  name = "font_main"
  path = "fonts/FreeSans.ttf"
  size = 22
  encoding = 'unic'

[[fonts]]
  name = "font_bold"
  path = "fonts/FreeSansBold.ttf"
  size = 22
  encoding = 'unic'

[[fonts]]
  name = "font_sm"
  path = "fonts/FreeSans.ttf"
  size = 18
  encoding = 'unic'

[[fonts]]
  name = "font_tiny"
  path = "fonts/FreeSans.ttf"
  size = 11
  encoding = 'unic'

# 7-segment font used for elapsed time and track number
[[fonts]]
  name = "font7S"
  path = "fonts/DSEG14Classic-Regular.ttf"
  size = 32

[[fonts]]
  name = "font7S_sm"
  path = "fonts/DSEG14Classic-Regular.ttf"
  size = 11


# --------------------------------------------------------------------
# Shared Elements
#
#   The intent of the shared_element table (which becomes a dictionary
#   in Python) is to define display elements that can be used by
#   multiple layouts.
#
#   The details of each entry must correspond to what one would
#   normally populate within a layout (e.g., a textfield needs a name,
#   posx, posy, font, fill, etc).
#
#   With any layout that desired to use such an element, one
#   references it by the name (key) given to it within the
#   shared_element table.  For instance, defining a shared progress
#   bar and elapsed time display could be done as follows:
#
#     [shared_element.elapsed_time]
#      name = "MusicPlayer.Time"
#      posx = 420
#      posy = 36
#      font = "font7S"
#      fill = "color_7S"
#      dynamic = 1
#
#     [shared_element.progress_bar]
#      posx   = 420
#      posy   = 8
#      height = 12
#      short_len = 196
#      long_len  = 300
#      color_fg = "color_7S"
#      color_bg = "color_gray"
#
#   Given the above definitions, a layout can then include a shared
#   element by refering to it by name (with no other keys listed).
#   Here is an example, which includes one normal directly-specified
#   element.
#
#     [A_LAYOUT.A_FULLSCREEN.thumb]
#     center = 1
#     size = 480
#
#     [A_LAYOUT.A_FULLSCREEN.prog]
#      shared_element = "progress_bar"
#
#     [[A_LAYOUT.A_FULLSCREEN.fields]]
#      shared_element = "elapsed_time"
#
#
# [shared_element.replace_name]
#



# --------------------------------------------------------------------
# Audio Screens
#
#   This data structure gets used by audio_screens() to control the
#   layout and contents of any audio information screens.  Content can
#   be omitted from a screen just by commenting it out here, particular
#   for text fields.
#
#   Entries within the "fields" array generally correspond to text
#   fields, but the introduction of the ELEMENT_CB lookup table (if
#   customized) does permit for additional graphical elements.  Such
#   customization does require a bit of Python programming.
#
#   Note that the available InfoLabels can be augmented via use of
#   the AUDIO_LABELS list (see earlier in this file).  The same
#   is true for InfoBooleans.
#
#   All entries in the "fields" array" MUST have a name (either
#   specified explicitly or inherited from a shared element
#   reference).  The 'name' key corresponds to ONE of the following:
#
#     - An exact match for one of the InfoLabels or Booleans retrieved
#       from Kodi.  The entry is only rendered if the corresponding
#       InfoLabel is non-empty.
#
#     - An exact match for one of the callback functions named in the
#       ELEMENT_CB table or the STRING_CB table.  That match triggers
#       execution of the corresponding callback function.
#
#     - An arbitrary string (not matching an InfoLabel or Boolean or
#       any callback function names), provided that the entry ALSO
#       specifies a 'format_str' key.  The interpolated format_str
#       always gets rendered.
#
#   The execution path followed by any of the above naming choices is
#   typically expected to yield a text string to display.  Remaining
#   keys that control the rendering of that text are as follows:
#
#      posx     X-coordinate for field (horizontal position)
#      posy     Y-coordinate for field (vertical position)
#      font     Font to use for rendering
#      fill     Text color
#
#      dynamic  A boolean flag to true/1 to indicate that the
#               field should be considered dynamic, re-drawn
#               upon every update loop.
#
#      prefix   Optional string ahead of InfoLabel text
#      suffix   Optional string following InfoLabel text
#
#      format_str Alternatively, rather than using prefix and suffix,
#                 and if one is NOT triggering a callback function, a
#                 formatting string can be specified.  The string
#                 should contain one or more InfoLabels to substitute,
#                 enclosed within curly braces.  See the status layout
#                 screen text fields for examples.
#
#                 Terms to be substituted can also make use of any
#                 entries defined within the string-manipulation
#                 callback table (see the STRING_CB dictionary in
#                 kodi_panel_display.py)
#
#      trunc    Flag indicating that single line string should
#               truncated at the right-hand edge of the display
#
#      wrap     Flag indication that the string should be wrapped.
#               When wrapping, further information is needed...
#
#      max_width  Maximum horizontal width string can occupy
#      max_lines  Maximum number of lines to occupy; additional
#                 text gets truncated on the final line
#
#      label    Separate text to display, with an independent
#               font and independent fill color, when the InfoLabel
#               is non-empty.  Labels require several additional
#               keys, all of which start with "l".  These are
#               still keys at the same level in the field's
#               dictionary.
#
#      lposx    Horizontal position for label string
#      lpoxy    Vertical position for label string
#      lfont    Font for label string
#      lfill    Font fill color for label string
#
#      exclude  A string or an array strings that, if the text to be
#               displayed exactly matches, causes the element to NOT
#               be drawn.
#
#      display_if / display_ifnot
#               An alternative mechanism for controlling element
#               display.  The value must be a two-element list
#               providing two strings.
#
#               The first string must be either an InfoLabel or a
#               string callback function (entry in STRING_CB).
#
#               The second string is then compared for equality (or
#               inequality, when using ifnot) against the string
#               resulting from "evaluating" the InfoLabel or callback
#               function.
#
#               Examples:
#
#                 display_if = [ "MusicPlayer.TrackNumber", "02" ]
#                 display_if = [ "Player.Paused", "true" ]
#
#
#   Internal callbacks are used for the 'codec' and 'artist' text
#   fields.  End-user scripts are free to augment or modify the
#   callback tables (look for ELEMENT_CB and STRING_CB).
#
# --------------------------------------------------------------------
#
# Background
#
#   Every layout, including the status screens, can optional specify a
#   background entry at the top-level.  A few examples are as follows:
#
#     [A_LAYOUT.A_FULLSCREEN.background]
#      fill = "navy"        # uniform fill color
#
#   or
#
#     [A_LAYOUT.A_FULLSCREEN.background]
#      rectangle = 1        # rectangle with frame/border
#      fill = "navy"
#      outline = "yellow"
#      width = 3
#
#   or
#
#     [STATUS_LAYOUT.background]
#      image = "images/mickey-sprite.png"   # assumed sized correctly
#
#
#   As shown, the entry must be named "background".
#
# --------------------------------------------------------------------


#
# Default audio info screen
#

# Note that one can optionally specify a display_if or display_ifnot
# expression for the cover art thumbnail (thumb)
[A_LAYOUT.A_DEFAULT.thumb]
  posx = 4
  posy = 7
  size = 140

  # If artwork is smaller than the above size, should it be centered
  # where the fullsize artwork would have been placed?
  center_sm = 1

  # Normally, artwork only gets reduced in size.  Setting this flag
  # enables upsizing to occur.  Note that the result may be blocky or
  # blurry in appearance.
  # enlarge = 1

# Note that one can optionally specify a display_if or display_ifnot
# expression for the progress bar (prog)
[A_LAYOUT.A_DEFAULT.prog]
posx   = 150     # upper-left corner x position
posy   = 7       # upper-left corner y position
height = 8       # pixel height
short_len = 104  # length when elapsed time matches 00:00 (min, seconds)
long_len  = 164  # length when elapsed time matches 00:00:00 (hrs, mins, seconds)
color_fg = "color_7S"
color_bg = "color_gray"

[[A_LAYOUT.A_DEFAULT.fields]]
name = "MusicPlayer.Time"
posx = 148
posy = 23
font = "font7S"
fill = "color_7S"
dynamic = 1

[[A_LAYOUT.A_DEFAULT.fields]]
name = "MusicPlayer.TrackNumber"
posx = 148
posy = 79
font = "font7S"
fill = "color_7S"
  # Label only appears if the field is present and non-empty
  label = "Track"
  lposx = 148
  lposy = 65
  lfont = "font_tiny"
  lfill = "white"

#
# This group of fields all appear to the right of the cover art
# and track number, in a small font.
#

[[A_LAYOUT.A_DEFAULT.fields]]
name = "MusicPlayer.Duration"
posx = 230
posy = 65
font = "font_tiny"
fill = "white"

[[A_LAYOUT.A_DEFAULT.fields]]
name = "codec"   # internal callback
posx = 230
posy = 79
font = "font_tiny"
fill = "white"

[[A_LAYOUT.A_DEFAULT.fields]]
name = "MusicPlayer.Genre"
posx = 230
posy = 93
font = "font_tiny"
fill = "white"
trunc = 1

# NOTE: For UPnP/DLNA playback, Kodi Leia doesn't seem to capture
#   dc:date.  Fortunately, the InfoLabel is left blank, unlike what
#   happens for videos.
[[A_LAYOUT.A_DEFAULT.fields]]
name = "MusicPlayer.Year"
posx = 230
posy = 107
font = "font_tiny"
fill = "white"

#
# Finally, the track title, album title, and artist appear below
# the cover art.
#

[[A_LAYOUT.A_DEFAULT.fields]]
name  = "MusicPlayer.Title"
posx  = 4
posy  = 152
font  = "font_main"
fill  = "white"
trunc = 1

[[A_LAYOUT.A_DEFAULT.fields]]
name  = "MusicPlayer.Album"
posx  = 4
posy  = 180
font  = "font_sm"
fill  = "white"
trunc = 1

[[A_LAYOUT.A_DEFAULT.fields]]
name  = "artist"   # internal callback
posx  = 4
posy  = 205
font  = "font_sm"
fill  = "color_artist"
trunc = 1
# Drop artist display if "Unknown"
exclude = "Unknown"


#
# Fullscreen artwork (by itself)
#

[A_LAYOUT.A_FULLSCREEN.thumb]
center = 1
size = 235


#
# Fullscreen artwork with progress bar
#
[A_LAYOUT.A_FULL_PROG.thumb]
center = 1
size = 235

[A_LAYOUT.A_FULL_PROG.prog]
vertical = 1
posx = 308    # upper-left corner x-position
posy = 1      # upper-left corner y-position
len  = 10     # pixel width for a vertical bar
height = 236  # total height for the vertical bar
color_fg = "color_7S"
color_bg = "color_gray"


# --------------------------------------------------------------------
# Video Screens
#
#   This data structure gets used by video_screens() to control the
#   layout and contents of any audio information screens.  Content can
#   be omitted from a screen just by commenting it out here, particular
#   for text fields.
#
#   Top-level entries within this V_LAYOUT table MUST have names that
#   correspond to the VLAYOUT_NAMES list specified earlier in this
#   file.
#
#   If a completely new InfoLabel is desired, then one must also
#   augment the VIDEO_LABELS list (see earlier in this file).
#
# --------------------------------------------------------------------

#
# Default video info
#

[V_LAYOUT.V_FULLSCREEN.thumb]   # artwork / movie poster
width  = 160
height = 240
center = 1


# --------------------------------------------------------------------
# Status Screen Content
#
#   Similar to audio layout above, but used for the status screen
#   that appears following a screen touch when idle.  The screen
#   gets drawn by status_screen().
#
#   Note that the dynamic flag for entries below (if present) is
#   just ignored for the status screen.  Everything is redrawn
#   on each update loop.
#
#   Internal callbacks are used for some fields.
#

[STATUS_LAYOUT.thumb]   # Kodi logo
posx = 5
posy = 5
size = 128

[[STATUS_LAYOUT.fields]]
name = "version"        # internal callback
posx = 145
posy = 8
font = "font_main"
fill = "color_artist"


[[STATUS_LAYOUT.fields]]
name = "summary"
posx = 145
posy = 35
font = "font_main"
fill = "white"

[[STATUS_LAYOUT.fields]]
name = "time_hrmin"     # internal callback
posx = 145
posy = 73
font = "font7S"
fill = "color_7S"
smfont = "font7S_sm"    # used for AM / PM

# The remaining fields all get populated via a special JSON-RPC query
# to Kodi specifically for the status screen.  See STATUS_LABELS
# above.

[[STATUS_LAYOUT.fields]]
name = "System.Date"
posx = 5
posy = 150
font = "font_sm"
fill = "white"

[[STATUS_LAYOUT.fields]]
name = "System.Uptime"
posx = 5
posy = 175
format_str = "Up: {System.Uptime}"
font = "font_sm"
fill = "white"

[[STATUS_LAYOUT.fields]]
name = "System.CPUTemperature"
posx = 5
posy = 200
format_str = "CPU: {System.CPUTemperature}, {System.CpuFrequency}"
font = "font_sm"
fill = "white"



# --------------------------------------------------------------------
# Slideshow Screen Content
#
#   Similar to audio layout above, but used when a photo slideshow
#   is in progress.
#

[S_LAYOUT.DEFAULT.background]
fill = "navy"

# This example shows the use of an arbitrary `name` when
# specifying a `format_str`
[[S_LAYOUT.DEFAULT.fields]]
name = "greeting"
posx = 5
posy = 0
format_str = "Hello, Slideshow!"
font = "font_bold"
fill = "white"

[[S_LAYOUT.DEFAULT.fields]]
name = "Slideshow.Resolution"
posx = 5
posy = 130
font = "font_sm"
fill = "white"

[[S_LAYOUT.DEFAULT.fields]]
name = "Slideshow.Aperture"
posx = 5
posy = 170
font = "font_sm"
fill = "white"

[[S_LAYOUT.DEFAULT.fields]]
name = "Slideshow.CameraModel"
posx = 5
posy = 210
font = "font_sm"
fill = "white"
